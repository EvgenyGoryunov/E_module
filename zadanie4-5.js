// Задание 5.

// (((
// Начало задания из задания предыдущего юнита (Задание 4.)

// Реализуйте следующее консольное приложение подобно примеру, который разбирался в видео. 
// Реализуйте его на прототипах.

// Определите иерархию электроприборов. Включите некоторые в розетку. Посчитайте потребляемую мощность.

// Таких приборов должно быть как минимум два (например, настольная лампа и компьютер). 
// Выбрав прибор, подумайте, какими свойствами он обладает.)

/*
 *  План:
 *
 *    Определите родительскую функцию с методами, которые включают/выключают прибор из розетки.
 *    Создайте делегирующую связь [[Prototype]] для двух конкретных приборов.
 *    У каждого из приборов должны быть собственные свойства и, желательно, методы, 
 *    отличные от родительских методов.
 *    Создайте экземпляры каждого прибора.
 *    Выведите в консоль и посмотрите на результаты работы, можете гордиться собой :)
 *
 */
// )))

// Переписать консольное приложение из предыдущего юнита на классы.

// Общие требования:

// Имена классов, свойств и методов должны быть информативными;
// Соблюдать best practices;
// Использовать синтаксис ES6.



// ***************************************  МОЕ РЕШЕНИЕ *******************************************


// создаем общий для всех классов класс с примерно общими свойствами
// name - название устройства, wattage - мощность его эл.потребления,
// category - категория (где в доме находится, кухня, комната, гараж), 
// type - тип (электрический, бензоинструмент), state - состояния прибора в данный момент
// (on - работает и потребляет энергию,  off - не работает), 
// метод  turn.OnOff - метод включения или отключения прибора (меняет state)

// конструктор объектов, класс Устройство (Devise)
class Device {
    constructor(name, wattage, category, state) {
        this.name = name || 'not set'
        this.wattage = wattage || 0
        this.category = category || 'home'
        this.type = type || 'electric'
        this.state = state || 'off'
        // метод push - добавляет в конец списка данный объект, т.е. при создании
        // нового объекта класса (прибора) будем автоматически добавлять его в список приборов
        // и в дальнейшем, при итерации списка (по мощности и включению) будем получать мощность
        devices.push(this)
    }

    // метод включения и отключения устройств
    // при его вызове переменной state присваивается значение on (работает), либо off -
    // (не работает), выводится в консоль сообщение о состоянии и пересчитывается потребляемая 
    // в данный момент мощность эл.приборов
    energeOnOff() {
        if (this.state === 'off') {
            this.state = 'on'
            console.log(`Устройство - ${this.state} (включено)`)
        }
        else if (this.state = 'on') {
            this.state = 'off'
            console.log(`Устройство - ${this.state} (выключено)`)
        }
        // powerTotal()
    }

    // метод получения информации, если устройство работает (state == 'on')
    aboutDevice() {
        if (this.state === 'on') {
            // usage(this.message)
            return `Устройство: ${this.name} ${this.category} ${this.type}.`
        } else return 'Устройство выключено'
    }

    deviceWattage() {
        if (this.state == 'on') return this.wattage
        return 0
    }
}


// массив (список) в который будем помещать сознанные нами устройства (для подсчета мощности
// и если включен)
const devices = []


// фукнция подсчета общей мощности работающих эл.приборов
// метод parseInt - преобразует строковый тип (мы мощность Вт строкой пишем) в числовой тип
// power += число - аналогично power = power + число
function getAllPowerOn() {
    for (let device of devices) {
        power += parseInt(device.getPower())
    }
    console.log('Суммарная мощность работающих эл.приборов: ' + power + 'Вт')
    return power
}



// создадим новый дочерний класс GarageDevice от класса Device, унаследовав от него часть
// свойст (от родительского класса) и добавив новый параметр - вес устройства (weight)
class GarageDevice extends Device {
    constructor(name, wattage, category, type, state, weight) {
        super(
            wattage,
            category,
            type,
            state
        )
        this.name = name
        this.wattage = wattage
        this.category = category
        this.type = type
        this.state = state
        this.weight = weight
    }

    aboutDevise() {
        if (this.state === 'on') {
            return `Это ${this.name} относится к ${this.category} ${this.type}, 
      мощностью ${this.wattage} watts and is set to mode ${this.mode}`
        } else return super.aboutDevise()
    }

}
