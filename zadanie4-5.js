// Задание 5.

// (((
// Начало задания из задания предыдущего юнита (Задание 4.)

// Реализуйте следующее консольное приложение подобно примеру, который разбирался в видео. 
// Реализуйте его на прототипах.

// Определите иерархию электроприборов. Включите некоторые в розетку. Посчитайте потребляемую мощность.

// Таких приборов должно быть как минимум два (например, настольная лампа и компьютер). 
// Выбрав прибор, подумайте, какими свойствами он обладает.)

/*
 *  План:
 *
 *    Определите родительскую функцию с методами, которые включают/выключают прибор из розетки.
 *    Создайте делегирующую связь [[Prototype]] для двух конкретных приборов.
 *    У каждого из приборов должны быть собственные свойства и, желательно, методы, 
 *    отличные от родительских методов.
 *    Создайте экземпляры каждого прибора.
 *    Выведите в консоль и посмотрите на результаты работы, можете гордиться собой :)
 *
 */
// )))

// Переписать консольное приложение из предыдущего юнита на классы.

// Общие требования:

// Имена классов, свойств и методов должны быть информативными;
// Соблюдать best practices;
// Использовать синтаксис ES6.



// ***************************************  МОЕ РЕШЕНИЕ *******************************************


// создаем общий для всех классов класс с примерно общими свойствами
// name - название устройства, wattage - мощность его эл.потребления,
// category - категория (где в доме находится, кухня, комната, гараж), 
// type - тип (электрический, мото), state - состояния прибора в данный момент
// (on - работает и потребляет энергию,  off - не работает), 
// метод  turn.OnOff - метод включения или отключения прибора (меняет state и 
// потребляемую мощность в данный момент)

// конструктор объектов, класс Устройства (Devise)
class Devise {
    constructor(name, wattage, category, state) {
        this.name = name || 'not set'
        this.wattage = wattage || 0
        this.category = category || 'home'
        this.type = type || 'electric'
        this.state = state || 'off'
        turn.OnOff(this)
    }

    // метод включения и отключения устройств
    // при его вызове переменной state присваивается значение либо on (работает), либо off -
    // не работает, выводится в консоль сообщение о состоянии и пересчитывается потребляемая 
    // в данный момент мощность эл.приборов
    energeOnOff() {
        if (this.state === 'off') {
            this.state = 'on'
            console.log(`Устройство - ${this.state} (включено)`)
        }
        else if (this.state = 'on') {
            this.state = 'off'
            console.log(`Устройство - ${this.state} (выключено)`)
        }
        // powerTotal()
    }

    // метод получения информации, если он работает (state == 1)
    aboutDevise() {
        if (this.state === 'on') {
            // usage(this.message)
            return `Устройство: ${this.name} ${this.category} ${this.type}.`
        } else return 'Устройство выключено'
    }
}


// массив (список) в который будем помещать сознанные нами устройства (для подсчета мощности
// и из включения и отключения)
const Devises = []


class GarageDevises extends Devises {
    constructor(name, mode, wattage, category, type, state) {
        super(
            wattage,
            category,
            type,
            state
        )
        this.name = name
        this.wattage = wattage
    }

    aboutDevise() {
        if (this.state === 'on') {
            return `Это ${this.name} относится к ${this.category} ${this.type}, 
      мощностью ${this.wattage} watts and is set to mode ${this.mode}`
        } else return super.aboutDevise()
    }

}
